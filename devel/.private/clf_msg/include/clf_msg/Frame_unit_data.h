// Generated by gencpp from file clf_msg/Frame_unit_data.msg
// DO NOT EDIT!


#ifndef CLF_MSG_MESSAGE_FRAME_UNIT_DATA_H
#define CLF_MSG_MESSAGE_FRAME_UNIT_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Imu.h>
#include <std_msgs/Int32.h>

namespace clf_msg
{
template <class ContainerAllocator>
struct Frame_unit_data_
{
  typedef Frame_unit_data_<ContainerAllocator> Type;

  Frame_unit_data_()
    : IMU()
    , data()  {
    }
  Frame_unit_data_(const ContainerAllocator& _alloc)
    : IMU(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::sensor_msgs::Imu_<ContainerAllocator>  _IMU_type;
  _IMU_type IMU;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::clf_msg::Frame_unit_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clf_msg::Frame_unit_data_<ContainerAllocator> const> ConstPtr;

}; // struct Frame_unit_data_

typedef ::clf_msg::Frame_unit_data_<std::allocator<void> > Frame_unit_data;

typedef boost::shared_ptr< ::clf_msg::Frame_unit_data > Frame_unit_dataPtr;
typedef boost::shared_ptr< ::clf_msg::Frame_unit_data const> Frame_unit_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clf_msg::Frame_unit_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clf_msg::Frame_unit_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace clf_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'clf_msg': ['/home/aghosh/makeUofT2020/muscle_makeUofT2020/src/clf_msg/msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::clf_msg::Frame_unit_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clf_msg::Frame_unit_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clf_msg::Frame_unit_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clf_msg::Frame_unit_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clf_msg::Frame_unit_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clf_msg::Frame_unit_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clf_msg::Frame_unit_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94524db803ef68f0233d9f1413641076";
  }

  static const char* value(const ::clf_msg::Frame_unit_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94524db803ef68f0ULL;
  static const uint64_t static_value2 = 0x233d9f1413641076ULL;
};

template<class ContainerAllocator>
struct DataType< ::clf_msg::Frame_unit_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clf_msg/Frame_unit_data";
  }

  static const char* value(const ::clf_msg::Frame_unit_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clf_msg::Frame_unit_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# DataFrame\n"
"# sequence ID: consecutively increasing ID \n"
"# uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"# time stamp\n"
"#Frame this data is associated with\n"
"# 0: no frame\n"
"# 1: global frame\n"
"# string frame_id\n"
"\n"
"# imu data\n"
"sensor_msgs/Imu IMU\n"
"\n"
"std_msgs/Int32 data\n"
"\n"
"### other sensors ###\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Imu\n"
"# This is a message to hold data from an IMU (Inertial Measurement Unit)\n"
"#\n"
"# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n"
"#\n"
"# If the covariance of the measurement is known, it should be filled in (if all you know is the \n"
"# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n"
"# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n"
"# data a covariance will have to be assumed or gotten from some other source\n"
"#\n"
"# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation \n"
"# estimate), please set element 0 of the associated covariance matrix to -1\n"
"# If you are interpreting this message, please check for a value of -1 in the first element of each \n"
"# covariance matrix, and disregard the associated estimate.\n"
"\n"
"Header header\n"
"\n"
"geometry_msgs/Quaternion orientation\n"
"float64[9] orientation_covariance # Row major about x, y, z axes\n"
"\n"
"geometry_msgs/Vector3 angular_velocity\n"
"float64[9] angular_velocity_covariance # Row major about x, y, z axes\n"
"\n"
"geometry_msgs/Vector3 linear_acceleration\n"
"float64[9] linear_acceleration_covariance # Row major x, y z \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
;
  }

  static const char* value(const ::clf_msg::Frame_unit_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clf_msg::Frame_unit_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.IMU);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Frame_unit_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clf_msg::Frame_unit_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clf_msg::Frame_unit_data_<ContainerAllocator>& v)
  {
    s << indent << "IMU: ";
    s << std::endl;
    Printer< ::sensor_msgs::Imu_<ContainerAllocator> >::stream(s, indent + "  ", v.IMU);
    s << indent << "data: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLF_MSG_MESSAGE_FRAME_UNIT_DATA_H
